current_path = rstudioapi::getActiveDocumentContext()$path
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = dirname(gsub('Scripts','',current_path)))
getwd()
paste0('~/', dirname(gsub('Scripts','',current_path)))
knitr::opts_knit$set(root.dir = paste0('~', dirname(gsub('Scripts','',current_path))) )
getwd()
current_path = rstudioapi::getActiveDocumentContext()$path
knitr::opts_knit$set(root.dir = paste0('~', dirname(gsub('Scripts','',current_path))) )
getwd()
# Set output directory
data_dir <- "../data"
output_dir <- 'Outputs'
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
list.of.packages <- c("dplyr", "kableExtra", "DT", "downloadthis", "ggplot2", "data.table",  "stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
list.of.packages <- c("bsselectR")
bsselectR <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(bsselectR)){devtools::install_github("walkerke/bsselectR")}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(stringr)
library(bsselectR)
library(kableExtra)
library(DT)
library(downloadthis)
library(ggplot2)
library(data.table)
library(dplyr)
library(readr)
library(rmarkdown)
library(rstudioapi)
options(knitr.table.format = "latex")
PInf = fread('Inputs/PInf.txt', stringsAsFactors = F, header = F)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
# Set output directory
data_dir <- "../data"
output_dir <- 'Outputs'
require("knitr")
opts_knit$set(root.dir = "~/Users/isar/Documents/scQCEA/")
require("knitr")
opts_knit$set(root.dir = "~/Users/isar/Documents/scQCEA/")
getwd()
gsub('Scripts', '', dirname(rstudioapi::getActiveDocumentContext()$path))
gsub('Scripts','',dirname(rstudioapi::getActiveDocumentContext()$path))
gsub('Scripts','',dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
# Set output directory
data_dir <- "../data"
output_dir <- 'Outputs'
require("knitr")
opts_knit$set(root.dir = gsub('Scripts','',dirname(rstudioapi::getActiveDocumentContext()$path)) )
require("knitr")
opts_knit$set(root.dir = gsub('Scripts','',dirname(rstudioapi::getActiveDocumentContext()$path)) )
require("knitr")
opts_knit$set(root.dir = gsub('Scripts','',dirname(rstudioapi::getActiveDocumentContext()$path)) )
print(getwd())
gsub('Scripts','',dirname(rstudioapi::getActiveDocumentContext()$path))
require("knitr")
opts_knit$set(root.dir = gsub('Scripts','',dirname(rstudioapi::getActiveDocumentContext()$path)) )
setwd(gsub('Scripts','',dirname(rstudioapi::getActiveDocumentContext()$path)))
print(getwd())
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "CLICK_ME.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
render(report_filename, output_dir = paste0(code_dir, '/', output_dir), params = list(output_dir = output))
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
render(report_filename, output_dir = paste0(code_dir, '/', output_dir), params = list(output_dir = output))
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
report_filename <- file.path(code_dir, report_filename)
report_filename
output_dir <- "Outputs"
output <- file.path("..", output_dir)
output
paste0(code_dir, '/', output_dir)
output
render(report_filename, output_dir = paste0(code_dir, '/', output_dir))
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "CLICK_ME.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
render(report_filename, output_dir = paste0(code_dir, '/', output_dir), params = list(output_dir = output))
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "CLICK_ME.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
getwd()
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "CLICK_ME.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
getwd()
#########################################################################
# Please execute the code in the RStudio IDE (https://www.rstudio.com/) #
#########################################################################
# Install and load R packages
list.of.packages <- c("rmarkdown", "rstudioapi")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(rmarkdown); library(rstudioapi);
# Create an "Interactive QC Report"
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)); render("SourceCode.Rmd", quiet = T);
invisible(file.rename('SourceCode.html', 'CLICK_ME.html'));
invisible(file.copy(from = 'CLICK_ME.html', to = "Outputs/CLICK_ME.html"));
invisible(file.remove(paste0(getwd(), '/CLICK_ME.html')));
PInf = fread('Inputs/PInf.txt', stringsAsFactors = F, header = F)
setwd('Outputs/'); zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), flags="-q");
############################################################
# 'Find the "Interactive QC Report" in the Outputs/ folder #
############################################################
setwd('Outputs/'); zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE, include_directories = TRUE, flags="-q");
setwd('Outputs/'); zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE, include_directories = TRUE, flags="-q");
# Install and load R packages
list.of.packages <- c("rmarkdown", "rstudioapi")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(rmarkdown); library(rstudioapi);
# Create an "Interactive QC Report"
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)); render("SourceCode.Rmd", quiet = T);
invisible(file.rename('SourceCode.html', 'CLICK_ME.html'));
invisible(file.copy(from = 'CLICK_ME.html', to = "Outputs/CLICK_ME.html"));
invisible(file.remove(paste0(getwd(), '/CLICK_ME.html')));
PInf = fread('Inputs/PInf.txt', stringsAsFactors = F, header = F)
setwd('Outputs/'); zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE, include_directories = TRUE, flags="-q");
setwd('Outputs/'); zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE, flags="-q");
getwd()
zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE, flags="-q");
zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE);
zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), flags="-q");
setwd('Outputs/');
library(zip)
setwd('Outputs/');
getwd()
library(zip)
zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE, flags="-q");
zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1])), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE);
zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1]),'.zip'), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE);
library(zip)
zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1]),'.zip'), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE, include_directories = TRUE);
#########################################################################
# Please execute the code in the RStudio IDE (https://www.rstudio.com/) #
#########################################################################
# Install and load R packages
list.of.packages <- c("rmarkdown", "rstudioapi", "zip")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(rmarkdown); library(rstudioapi); library(zip);
# Create an "Interactive QC Report"
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)); render("SourceCode.Rmd", quiet = T);
invisible(file.rename('SourceCode.html', 'CLICK_ME.html'));
invisible(file.copy(from = 'CLICK_ME.html', to = "Outputs/CLICK_ME.html"));
invisible(file.remove(paste0(getwd(), '/CLICK_ME.html')));
PInf = fread('Inputs/PInf.txt', stringsAsFactors = F, header = F)
getwd()
setwd('Outputs/');
zip(zipfile = paste0('OGC_Interactive_QC_Report_', gsub('.*=','',PInf$V1[1]),'.zip'), files = c('CLICK_ME.html', 'Inputs'), recurse = TRUE, include_directories = TRUE);
############################################################
# 'Find the "Interactive QC Report" in the Outputs/ folder #
############################################################
setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
getwd()
source("GIR.R")
Generate_Interactive_QC_Report()
Generate_Interactive_QC_Report()
#########################################################################
# Please execute the code in the RStudio IDE (https://www.rstudio.com/) #
#########################################################################
getwd()
# importing rstudioapi package
library("rstudioapi")
# retrieving path from getSourceEditorContext()
# using $ operator
getSourceEditorContext()$path
library("here")
here()
#########################################################################
# Please execute the code in the RStudio IDE (https://www.rstudio.com/) #
#########################################################################
# Install and load R package
list.of.packages <- c("rstudioapi")
new.packages <- list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("Generate_Interactive_QC_Report.R")
# Generate an "Interactive QC Report"
Generate_Interactive_QC_Report()
############################################################
# 'Find the "Interactive QC Report" in the Outputs/ folder #
############################################################
# setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("GenerateMetadataEnrichment.R")
# Generate Metadata for Enrichment
setwd(dirname(rstudioapi::getActiveDocumentContext()$path));
getwd()
# setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("GenerateMetadataEnrichment.R")
# Generate Metadata for Enrichment
setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
# Generate Metadata for Enrichment
setwd(dirname(rstudioapi::getActiveDocumentContext()$path));
getwd()
# Generate Metadata for Enrichment
setwd(gsub('Scripts', 'Inputs', dirname(rstudioapi::getActiveDocumentContext()$path)));
getwd()
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("GenerateInteractiveQCReport.R")
# Generate an "Interactive QC Report"
GenerateInteractiveQCReport()
# Install and load R packages
list.of.packages <- c("rmarkdown", "rstudioapi", "zip")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(rmarkdown); library(rstudioapi); library(zip);
setwd(dirname(rstudioapi::getActiveDocumentContext()$path));
getwd()
source("GenerateMetadataEnrichment.R")
# Install and load R packages
list.of.packages <- c("data.table", "rstudioapi")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(data.table); library(rstudioapi);
library("rstudioapi")
library("data.table")
# Generate Metadata for Enrichment
setwd(gsub('Scripts', 'Inputs', dirname(rstudioapi::getActiveDocumentContext()$path)));
SamplesMetadata = fread('samples.metadata', stringsAsFactors = F, header = T)
# ---------------------------------- example input
project_id <- unique(SamplesMetadata$`Project Number`)
backend.data.dir <- "Inputs/ReferenceGeneSets/"
if(unique(SamplesMetadata$Genome) == 'GRCh38'){ organism <- "hsapiens" }
if(unique(SamplesMetadata$Genome) == 'GRCm38'){ organism <- "mmusculus" }
if(unique(SamplesMetadata$Genome) == 'GRCh38-premrna'){ organism <- "hsapiens" }
if(unique(SamplesMetadata$Genome) == 'GRCm38-premrna'){ organism <- "mmusculus" }
getwd()
list.dirs.depth.n <- function(p, n) {
res <- list.dirs(p, recursive = FALSE)
if (n > 1) {
add <- list.dirs.depth.n(res, n-1)
c(res, add)
} else {
res
}
}
#list files recursive up to a certain level in R
dirs <- list.dirs.depth.n(".", n = 2)
#Include pattern in list.dirs
dirs <- grep("10X-gex", dirs, value = TRUE)
if(length(grep('./10X-gex-grouped/', dirs))>0)
{
input.dir = dirs[grep('./10X-gex-grouped/', dirs)]
input.dir = paste0('/well/singlecell/', project_id, '/', input.dir)
input.dir = gsub('/./', '/', input.dir)
OP = if(organism == "hsapiens"){paste0(backend.data.dir, 'human')}else{paste0(backend.data.dir, 'mouse')}
guide_file = data.frame(
project_id = replicate(length(input.dir),project_id),
sample_id = gsub('.*\\/','',input.dir),
inpute_dir = input.dir,
backend_data_dir = replicate(length(input.dir),OP),
organism = replicate(length(input.dir),organism))
write.table(guide_file, 'gex_grouped_aggregation', quote = F, col.names = F, row.names = F, sep = '\t')
}
if(length(grep('./10X-gex/', dirs))>0)
{
input.dir = dirs[grep('./10X-gex/', dirs)]
input.dir = paste0('/well/singlecell/', project_id, '/', input.dir)
input.dir = gsub('/./', '/', input.dir)
OP = if(organism == "hsapiens"){paste0(backend.data.dir, 'human')}else{paste0(backend.data.dir, 'mouse')}
guide_file = data.frame(
project_id = replicate(length(input.dir),project_id),
sample_id = gsub('.*\\/','',input.dir),
inpute_dir = input.dir,
backend_data_dir = replicate(length(input.dir),OP),
organism = replicate(length(input.dir),organism))
write.table(guide_file, 'gex_ungrouped_aggregation', quote = F, col.names = F, row.names = F, sep = '\t')
}
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("GenerateInteractiveQCReport.R")
# Generate an "Interactive QC Report"
GenerateInteractiveQCReport()
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("GenerateInteractiveQCReport.R")
# Generate an "Interactive QC Report"
GenerateInteractiveQCReport()
# Install and load R packages
list.of.packages <- c("rmarkdown", "rstudioapi", "zip")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(rmarkdown); library(rstudioapi); library(zip);
setwd(dirname(rstudioapi::getActiveDocumentContext()$path));
getwd()
source("GenerateMetadataEnrichment.R")
GenerateMetadataEnrichment()
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("GenerateMetadataEnrichment.R")
GenerateMetadataEnrichment()
getwd()
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
getwd()
source("GenerateMetadataEnrichment.R")
GenerateMetadataEnrichment()
# Generate Metadata for Enrichment
setwd(gsub('Scripts', 'Inputs', dirname(rstudioapi::getActiveDocumentContext()$path)));
SamplesMetadata = fread('samples.metadata', stringsAsFactors = F, header = T)
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
getwd()
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
getwd()
source("GenerateMetadataEnrichment.R")
GenerateMetadataEnrichment()
# Create an "Interactive QC Report"
setwd("~/"); setwd(dirname(rstudioapi::getActiveDocumentContext()$path));
render("SourceCode.Rmd", quiet = T);
getwd()
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
getwd()
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
getwd()
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
#########################################################################
# Please execute the code in the RStudio IDE (https://www.rstudio.com/) #
#########################################################################
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
############################################################
#  Find the "Interactive QC Report" in the Outputs/ folder #
############################################################
# Install and load R packages
list.of.packages <- c("data.table", "rstudioapi", "DT", "NMF", "plotly", "stringr", "dplyr", "BiocManager")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(data.table, quietly = TRUE); library(rstudioapi, quietly = TRUE); library(DT, quietly = TRUE); library(NMF, quietly = TRUE); library(plotly, quietly = TRUE); library(stringr, quietly = TRUE); library(dplyr, quietly = TRUE); require("BiocManager", quietly = TRUE);
list.of.packages <- c("AUCell" )
AUCell.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(AUCell.R)){BiocManager::install("AUCell")}
list.of.packages <- c( "GSEABase" )
GSEABase.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GSEABase.R)){BiocManager::install("GSEABase")}
list.of.packages <- c( "GEOquery")
GEOquery.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GEOquery.R)){BiocManager::install("GEOquery")}
# Install and load R packages
list.of.packages <- c("data.table", "rstudioapi", "DT", "NMF", "plotly", "stringr", "dplyr", "BiocManager")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(data.table, quietly = TRUE); library(rstudioapi, quietly = TRUE); library(DT, quietly = TRUE); library(NMF, quietly = TRUE); library(plotly, quietly = TRUE); library(stringr, quietly = TRUE); library(dplyr, quietly = TRUE); require("BiocManager", quietly = TRUE);
list.of.packages <- c("AUCell" )
AUCell.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(AUCell.R)){BiocManager::install("AUCell")}
list.of.packages <- c( "GSEABase" )
GSEABase.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GSEABase.R)){BiocManager::install("GSEABase")}
list.of.packages <- c( "GEOquery")
GEOquery.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GEOquery.R)){BiocManager::install("GEOquery")}
# Install and load R packages
list.of.packages <- c("data.table", "rstudioapi", "DT", "NMF", "plotly", "stringr", "dplyr", "BiocManager")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(data.table, quietly = TRUE); library(rstudioapi, quietly = TRUE); library(DT, quietly = TRUE); library(NMF, quietly = TRUE); library(plotly, quietly = TRUE); library(stringr, quietly = TRUE); library(dplyr, quietly = TRUE); require("BiocManager", quietly = TRUE);
list.of.packages <- c("AUCell" )
AUCell.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(AUCell.R)){BiocManager::install("AUCell")}
list.of.packages <- c( "GSEABase" )
GSEABase.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GSEABase.R)){BiocManager::install("GSEABase")}
list.of.packages <- c( "GEOquery")
GEOquery.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GEOquery.R)){BiocManager::install("GEOquery")}
# getActiveDocumentContext shows the location of RNN_ME
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Inputs/'));
SamplesMetadata = fread('samples.metadata', stringsAsFactors = F, header = T)
# ---------------------------------- example input
project_id <- unique(SamplesMetadata$`Project Number`)
backend.data.dir <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/Scripts/ReferenceGeneSets/")
if(unique(SamplesMetadata$Genome) == 'GRCh38'){ organism <- "hsapiens" }
if(unique(SamplesMetadata$Genome) == 'GRCm38'){ organism <- "mmusculus" }
if(unique(SamplesMetadata$Genome) == 'GRCh38-premrna'){ organism <- "hsapiens" }
if(unique(SamplesMetadata$Genome) == 'GRCm38-premrna'){ organism <- "mmusculus" }
# Install and load R packages
list.of.packages <- c("data.table", "rstudioapi", "DT", "NMF", "plotly", "stringr", "dplyr", "BiocManager")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(data.table, quietly = TRUE); library(rstudioapi, quietly = TRUE); library(DT, quietly = TRUE); library(NMF, quietly = TRUE); library(plotly, quietly = TRUE); library(stringr, quietly = TRUE); library(dplyr, quietly = TRUE); require("BiocManager", quietly = TRUE);
list.of.packages <- c("AUCell" )
AUCell.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(AUCell.R)){BiocManager::install("AUCell")}
list.of.packages <- c( "GSEABase" )
GSEABase.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GSEABase.R)){BiocManager::install("GSEABase")}
list.of.packages <- c( "GEOquery")
GEOquery.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GEOquery.R)){BiocManager::install("GEOquery")}
# getActiveDocumentContext shows the location of RNN_ME
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Inputs/'));
setwd("~/");
# getActiveDocumentContext shows the location of RNN_ME
getwd()
dirname(rstudioapi::getActiveDocumentContext()$path)
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
GenerateInteractiveQCReport()
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
# Generate an "Interactive QC Report"
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
# Install and load R packages
list.of.packages <- c("data.table", "rstudioapi", "DT", "NMF", "plotly", "stringr", "dplyr", "BiocManager")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library(data.table, quietly = TRUE); library(rstudioapi, quietly = TRUE); library(DT, quietly = TRUE); library(NMF, quietly = TRUE); library(plotly, quietly = TRUE); library(stringr, quietly = TRUE); library(dplyr, quietly = TRUE); require("BiocManager", quietly = TRUE);
list.of.packages <- c("AUCell" )
AUCell.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(AUCell.R)){BiocManager::install("AUCell")}
list.of.packages <- c( "GSEABase" )
GSEABase.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GSEABase.R)){BiocManager::install("GSEABase")}
list.of.packages <- c( "GEOquery")
GEOquery.R <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(GEOquery.R)){BiocManager::install("GEOquery")}
# getActiveDocumentContext shows the location of RNN_ME
getwd()
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Inputs/'));
SamplesMetadata = fread('samples.metadata', stringsAsFactors = F, header = T)
# getActiveDocumentContext shows the location of RNN_ME
getwd()
dirname(rstudioapi::getActiveDocumentContext()$path)
# Install and load R package
if(length(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])])) install.packages(list.of.packages[!("rstudioapi" %in% installed.packages()[,"Package"])], repos = "http://cran.us.r-project.org")
library("rstudioapi")
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
# getActiveDocumentContext shows the location of RNN_ME
getwd()
