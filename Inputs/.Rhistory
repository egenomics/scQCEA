HTO_SEQUENCING_ID = 'NULL'
HTO_DATA_DIR = 'NULL'
}
if(dim(CITE)[1]>0){
if(length(which(CITE$Sample_revised == i)) == 1){
CITE_sub = CITE[which(CITE$Sample_revised == i),]
CITE_LIBRARY_ID = unique(CITE_sub$LIMSID)
CITE_SEQUENCING_ID = unique(CITE_sub$SequencingID)
CITE_DATA_DIR = paste0('/well/singlecell/',PROJECT_ID,'/10X-feat/',CITE_SEQUENCING_ID,'/outs/raw_feature_bc_matrix')
}else{
CITE_sub = CITE[which(CITE$Sample_revised == i),]
CITE_LIBRARY_ID = unique(CITE_sub$LIMSID)
CITE_SEQUENCING_ID = unique(CITE_sub$LIMSID)
CITE_DATA_DIR = paste0('/well/singlecell/',PROJECT_ID,'/10X-feat-grouped/',CITE_SEQUENCING_ID,'/outs/raw_feature_bc_matrix')
}
} else{
CITE_LIBRARY_ID = HTO_LIBRARY_ID
CITE_SEQUENCING_ID = HTO_SEQUENCING_ID
CITE_DATA_DIR = HTO_DATA_DIR
}
sample.aggregate[index] = paste( PROJECT_ID,
GEX_LIBRARY_ID,
GEX_SEQUENCING_ID,
GEX_DATA_DIR,
HTO_LIBRARY_ID,
HTO_SEQUENCING_ID,
HTO_DATA_DIR,
CITE_LIBRARY_ID,
CITE_SEQUENCING_ID,
CITE_DATA_DIR,
OUTPUT_DIR = paste0('/well/singlecell/',PROJECT_ID,'/10X-aggregate'),
'htodemux')
index=index+1;
# PROJECT_ID	P200376
# GEX_LIBRARY_ID	ARN8640A1
# GEX_SEQUENCING_ID	ARN8640A1
# GEX_DATA_DIR	/well/singlecell/P200376/10X-gex-grouped/ARN8640A1/outs/filtered_feature_bc_matrix
# HTO_LIBRARY_ID	ARN8640A4
# HTO_SEQUENCING_ID	ARN8640A4
# HTO_DATA_DIR	/well/singlecell/P200376/10X-aggregate.htodemux/10X-feat-grouped/ARN8640A4/outs/raw_feature_bc_matrix
# ADT_LIBRARY_ID	ARN8640A4
# ADT_SEQUENCING_ID	ARN8640A4
# ADT_DATA_DIR	/well/singlecell/P200376/10X-aggregate.htodemux/10X-feat-grouped/ARN8640A4/outs/raw_feature_bc_matrix
# OUTPUT_DIR	/well/singlecell/P200376/10X-aggregate.htodemux
# DEMUX_METHOD	c('multiseq', 'htodemux')
# DEMUX_MS_AT
# SAVE_RAW
# SAVE_FILTERED
# SAVE_SPLITTED
}
class(sample.aggregate)
write.table(sample.aggregate, paste0(DIR, '/samples.aggregate'), quote = F, row.names = F, sep = '\t', col.names = F)
write.csv(sample.aggregate, paste0(DIR, '/samples.aggregate.csv')) # replace the NULL and use vi to create the samples.aggregate on the server
# create a dataset - P210367
Sample_Pool <- c( rep("Pool-1" , 1) )
Cells <- rep(c("Doublet" , "QC-passed") , 1)
Percentage <- c(13.9, 86.0)
data <- data.frame(Sample_Pool,Cells,Percentage)
PI='P210367'
# Stacked + percent
p<-ggplot(data, aes(x=Sample_Pool, y=Percentage, fill=Cells)) +
geom_bar(stat="identity")+theme_minimal()+theme(text = element_text(size = 20)) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))+ xlab("")
pdf(paste0('/Users/isar/Desktop/', PI, '_QC.pdf'),width = 8, height = 8, useDingbats = F)
p
dev.off()
library(data.table)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ QC passed cell
library(ggplot2)
# create a dataset - P210367
Sample_Pool <- c( rep("Pool-1" , 1) )
Cells <- rep(c("Doublet" , "QC-passed") , 1)
Percentage <- c(13.9, 86.0)
data <- data.frame(Sample_Pool,Cells,Percentage)
PI='P210367'
# Stacked + percent
p<-ggplot(data, aes(x=Sample_Pool, y=Percentage, fill=Cells)) +
geom_bar(stat="identity")+theme_minimal()+theme(text = element_text(size = 20)) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))+ xlab("")
pdf(paste0('/Users/isar/Desktop/', PI, '_QC.pdf'),width = 8, height = 8, useDingbats = F)
p
dev.off()
#----
PI='P210367'
library(data.table)
input = fread('/Users/isar/Downloads/P210448_summary.txt', stringsAsFactors = F, header = T)
# Create data
Type <- c(rep("Cells", dim(input)[1]) , rep("Genes", dim(input)[1]) , rep("DCOG", dim(input)[1]))
value <- c( input$Cells, input$Genes, input$DCOG )
data <- data.frame(Type,value)
data$Type = factor(data$Type, levels = c("Cells", "Genes", "DCOG"))
# boxplot
library(RColorBrewer)
p<-ggplot(data, aes(x = Type, y = value)) +
geom_boxplot(aes(fill = Type)) +
scale_fill_manual(values = brewer.pal(3, "Dark2"), guide = guide_legend(title = "Type")) +
geom_jitter(position=position_jitter(0.2)) +
theme_bw(base_size = 14) + theme(text = element_text(size = 20))+
xlab("") +
ylab("Count")
pdf(paste0('/Users/isar/Desktop/', PI, '_SAVER.pdf'),width = 8, height = 8, useDingbats = F)
p
dev.off()
#----
PI='P210367'
library(data.table)
input = fread('/Users/isar/Downloads/P210448_summary.txt', stringsAsFactors = F, header = T)
# Create data
Type <- c(rep("Cells", dim(input)[1]) , rep("Genes", dim(input)[1]) , rep("DCOG", dim(input)[1]))
value <- c( input$Cells, input$Genes, input$DCOG )
data <- data.frame(Type,value)
data$Type = factor(data$Type, levels = c("Cells", "Genes", "DCOG"))
# boxplot
library(RColorBrewer)
p<-ggplot(data, aes(x = Type, y = value)) +
geom_boxplot(aes(fill = Type)) +
scale_fill_manual(values = brewer.pal(3, "Dark2"), guide = guide_legend(title = "Type")) +
geom_jitter(position=position_jitter(0.2)) +
theme_bw(base_size = 14) + theme(text = element_text(size = 20))+
xlab("") +
ylab("Count")
p
dev.off()
dev.off()
p
ggplot(data, aes(x = Type, y = value)) +
geom_boxplot(aes(fill = Type)) +
scale_fill_manual(values = brewer.pal(3, "Dark2"), guide = guide_legend(title = "Type")) +
geom_jitter(position=position_jitter(0.2)) +
theme_bw(base_size = 14) + theme(text = element_text(size = 20))+
xlab("") +
ylab("Count")
data
input
#----
PI='P210367'
library(data.table)
input = fread('/Users/isar/Downloads/P210448_summary.txt', stringsAsFactors = F, header = T)
input = fread('/Users/isar/Downloads/summary.txt', stringsAsFactors = F, header = T)
#----
PI='P210367'
library(data.table)
input = fread('/Users/isar/Downloads/P210367_summary.txt', stringsAsFactors = F, header = T)
# Create data
Type <- c(rep("Cells", dim(input)[1]) , rep("Genes", dim(input)[1]) , rep("DCOG", dim(input)[1]))
value <- c( input$Cells, input$Genes, input$DCOG )
data <- data.frame(Type,value)
data$Type = factor(data$Type, levels = c("Cells", "Genes", "DCOG"))
# boxplot
library(RColorBrewer)
p<-ggplot(data, aes(x = Type, y = value)) +
geom_boxplot(aes(fill = Type)) +
scale_fill_manual(values = brewer.pal(3, "Dark2"), guide = guide_legend(title = "Type")) +
geom_jitter(position=position_jitter(0.2)) +
theme_bw(base_size = 14) + theme(text = element_text(size = 20))+
xlab("") +
ylab("Count")
pdf(paste0('/Users/isar/Desktop/', PI, '_SAVER.pdf'),width = 8, height = 8, useDingbats = F)
p
dev.off()
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "CLICK_ME.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
getwd()
here()
library("here")
library("here")
here()
dirname(sys.frame(1)$ofile)
library(rstudioapi)
rstudioapi::getActiveDocumentContext()$path
dirname(rstudioapi::getActiveDocumentContext()$path)
getwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = paste0(code_dir, '/', output_dir), params = list(output_dir = output))
render(report_filename, output_dir = output_dir, params = list(output_dir = output))
output_dir
report_filename
code_dir <- "scQCEA"
report_filename <- "CLICK_ME.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = paste0(code_dir, '/', output_dir), params = list(output_dir = output))
getwd()
ls
paste0(code_dir, '/', output_dir)
paste0(code_dir, '/', output_dir)
list(output_dir = output)
render(report_filename, output_dir = paste0(code_dir, '/', output_dir))
output_dir
getwd()
paste0(code_dir, '/', output_dir)
render(report_filename, output_dir = output_dir)
xfun::pkg_load2(c("htmltools", "mime"))
library(htmltools)
library(xfun)
knitr::opts_chunk$set(echo = TRUE)
# Set output directory
data_dir <- "../data"
output_dir <- 'Outputs'
paste0(normalize_path('Inputs'), ".zip")
paste0(normalize_path('Inputs'), ".zip")
copyDirectory("Inputs", to="Outputs", recursive=TRUE)
library(R.utils)
copyDirectory("Inputs", to="Outputs", recursive=TRUE)
copyDirectory("Inputs", to="Inputs/Outputs", recursive=TRUE)
copyDirectory("Inputs", to="Outputs/Inputs", recursive=TRUE)
copyDirectory("Inputs", to="Outputs/Inputs", recursive=TRUE)
library(R.utils)
copyDirectory("Inputs", to="Outputs/Inputs", recursive=TRUE)
library(R.utils)
copyDirectory("Inputs", to="Outputs/Inputs", recursive=TRUE)
library(R.utils)
copyDirectory("Inputs", to="Outputs", recursive=TRUE)
copyDirectory("Inputs", to="Outputs/Inputs", recursive=TRUE)
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "CLICK_ME.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
setwd('Outputs')
file.rename('Outputs/SourceCode.html', 'Outputs/CLICK_ME.html')
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
getwd()
paste0(getwd(), '/Outputs/SourceCode.html')
file.rename(paste0(getwd(), '/Outputs/SourceCode.html'), paste0(getwd(), '/Outputs/CLICK_ME.html') )
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
file.rename(paste0(getwd(), '/Outputs/'), 'SourceCode.html', 'CLICK_ME.html') )
getwd()
paste0(getwd(), '/Outputs/')
rename.files(paste0(getwd(), '/Outputs/'), 'SourceCode.html', 'CLICK_ME.html') )
rename.files(paste0(getwd(), '/Outputs/'), 'SourceCode.html', 'CLICK_ME.html')
library(SciencesPo)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
list.of.packages <- c("dplyr", "kableExtra", "DT", "downloadthis", "ggplot2", "data.table",  "stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
list.of.packages <- c("bsselectR")
bsselectR <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(bsselectR)){devtools::install_github("walkerke/bsselectR")}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(stringr)
library(bsselectR)
library(kableExtra)
library(DT)
library(downloadthis)
library(ggplot2)
library(data.table)
library(dplyr)
library(readr)
library(rmarkdown)
library(R.utils)
library(SciencesPo)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
list.of.packages <- c("dplyr", "kableExtra", "DT", "downloadthis", "ggplot2", "data.table",  "stringr", "SciencesPo", "R.utils", "readr", "rmarkdown")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
list.of.packages <- c("bsselectR")
bsselectR <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(bsselectR)){devtools::install_github("walkerke/bsselectR")}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(stringr)
library(bsselectR)
library(kableExtra)
library(DT)
library(downloadthis)
library(ggplot2)
library(data.table)
library(dplyr)
library(readr)
library(rmarkdown)
library(R.utils)
library(SciencesPo)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
list.of.packages <- c("dplyr", "kableExtra", "DT", "downloadthis", "ggplot2", "data.table",  "stringr", "SciencesPo", "R.utils", "readr", "rmarkdown")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
list.of.packages <- c("bsselectR")
bsselectR <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(bsselectR)){devtools::install_github("walkerke/bsselectR")}
list.of.packages <- c("SciencesPo")
SciencesPo <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(SciencesPo)){install.packages('SciencesPo', dep=TRUE)}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(stringr)
library(bsselectR)
library(kableExtra)
library(DT)
library(downloadthis)
library(ggplot2)
library(data.table)
library(dplyr)
library(readr)
library(rmarkdown)
library(R.utils)
library(SciencesPo)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
getwd()
setwd('Outputs/)
setwd('Outputs/')
setwd('Outputs/')
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Set output directory
data_dir <- "../data"
output_dir <- 'Outputs'
library(R.utils)
copyDirectory("Inputs", to="Outputs/Inputs", recursive=TRUE)
getwd()
setwd('Outputs/')
file.rename('SourceCode.html', 'CLICK_ME.html')
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Outputs')
# Set output directory
data_dir <- "../data"
output_dir <- 'Outputs'
library(R.utils)
copyDirectory("Inputs", to="Outputs/Inputs", recursive=TRUE)
file.rename('SourceCode.html', 'CLICK_ME.html')
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
file.rename('SourceCode.html', 'CLICK_ME.html')
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd('Outputs/')
library(rmarkdown)
code_dir <- "scQCEA"
report_filename <- "SourceCode.Rmd"
# report_filename <- file.path(code_dir, report_filename)
output_dir <- "Outputs"
output <- file.path("..", output_dir)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
render(report_filename, output_dir = output_dir)
setwd('Outputs/')
file.rename('SourceCode.html', 'CLICK_ME.html')
library(pdftools)
# Higher quality
bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
library(paperutils)
library(pdftools)
# Higher quality
bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
library(magick)
library(pdftools)
# Higher quality
bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
library(pdftools)
# Higher quality
bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
showtext::showtext_auto()
install.packages('showtext')
showtext::showtext_auto()
library(pdftools)
# Higher quality
bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
export FONTCONFIG_PATH=/etc/fonts
library(pdftools)
# Higher quality
bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
# Higher quality
pdftools::bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
# Higher quality
bitmap <- pdftools::pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
remove.packages('png')
library(png)
library(pdftools)
# Higher quality
bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
options(shiny.usecairo = FALSE)
# Higher quality
bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
# Higher quality
bitmap <- pdf_render_page('/Users/isar/Downloads/scQCEA/Inputs/10X-gex/481207_03/P180121_481207_03_tSNE_Plot.pdf', page = 1, dpi = 300)
##### Install and load R packages #####
if(!("rstudioapi" %in% installed.packages()[,"Package"])) install.packages("rstudioapi", repos = "http://cran.us.r-project.org"); library("rstudioapi")
##### Cell Type Enrichment Analysis #####
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
##### Generate an "Interactive QC Report" #####
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
##### Generate an "Interactive QC Report" #####
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
##### Generate an "Interactive QC Report" #####
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
getwd()
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
##### Generate an "Interactive QC Report" #####
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
getwd()
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
##### Generate an "Interactive QC Report" #####
setwd("~/"); setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), '/Scripts/'));
getwd()
source("GenerateInteractiveQCReport.R")
GenerateInteractiveQCReport()
